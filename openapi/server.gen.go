// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List and search movies
	// (GET /movies)
	GetMovies(c *gin.Context, params GetMoviesParams)
	// Create movie (synchronously query and merge box office data after success)
	// (POST /movies)
	PostMovies(c *gin.Context)
	// Rating aggregation
	// (GET /movies/{title}/rating)
	GetMoviesTitleRating(c *gin.Context, title string)
	// Submit rating (Upsert)
	// (POST /movies/{title}/ratings)
	PostMoviesTitleRatings(c *gin.Context, title string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetMovies operation middleware
func (siw *ServerInterfaceWrapper) GetMovies(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMoviesParams

	// ------------- Optional query parameter "q" -------------

	err = runtime.BindQueryParameter("form", true, false, "q", c.Request.URL.Query(), &params.Q)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter q: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "year" -------------

	err = runtime.BindQueryParameter("form", true, false, "year", c.Request.URL.Query(), &params.Year)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "genre" -------------

	err = runtime.BindQueryParameter("form", true, false, "genre", c.Request.URL.Query(), &params.Genre)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter genre: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "distributor" -------------

	err = runtime.BindQueryParameter("form", true, false, "distributor", c.Request.URL.Query(), &params.Distributor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter distributor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "budget" -------------

	err = runtime.BindQueryParameter("form", true, false, "budget", c.Request.URL.Query(), &params.Budget)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter budget: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "mpaRating" -------------

	err = runtime.BindQueryParameter("form", true, false, "mpaRating", c.Request.URL.Query(), &params.MpaRating)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter mpaRating: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMovies(c, params)
}

// PostMovies operation middleware
func (siw *ServerInterfaceWrapper) PostMovies(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMovies(c)
}

// GetMoviesTitleRating operation middleware
func (siw *ServerInterfaceWrapper) GetMoviesTitleRating(c *gin.Context) {

	var err error

	// ------------- Path parameter "title" -------------
	var title string

	err = runtime.BindStyledParameterWithOptions("simple", "title", c.Param("title"), &title, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter title: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetMoviesTitleRating(c, title)
}

// PostMoviesTitleRatings operation middleware
func (siw *ServerInterfaceWrapper) PostMoviesTitleRatings(c *gin.Context) {

	var err error

	// ------------- Path parameter "title" -------------
	var title string

	err = runtime.BindStyledParameterWithOptions("simple", "title", c.Param("title"), &title, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter title: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(RaterIdScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostMoviesTitleRatings(c, title)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/movies", wrapper.GetMovies)
	router.POST(options.BaseURL+"/movies", wrapper.PostMovies)
	router.GET(options.BaseURL+"/movies/:title/rating", wrapper.GetMoviesTitleRating)
	router.POST(options.BaseURL+"/movies/:title/ratings", wrapper.PostMoviesTitleRatings)
}
